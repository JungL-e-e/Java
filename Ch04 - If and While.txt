4-1 코드 실행 흐름 제어

1. 조건문:	if문
		switch문
2. 반복문:	for문
		while문
		do-while문



4-2 if문

Ex)	if (조건식) {
	조건식이 true이면 수행할 내용;
	}
	
Ex)	if (조건식1) {
	조건식1 true 수행내용;
	}
	else if (조건식2) {
	조건식2 true 수행내용;
	}
	else {
	나머지일때 수행내용;
	}

* Math.random() = 0 부터 1.0 사이의 랜덤한 수를 뽑아내는 함수



4-3 switch문

Ex)	switch(변수) {
		case 값1:
		case 값1-1:
			값1, 값1-1 때 수행내용;
			break;
		case 값2:
			값2 때 수행내용;
			break;
		case 값3:
			값3 때 수행내용;
			break;	
		default:
			값이 모두 아닐경우 수행내용;
	}

* break가 없다면 다음 case가 연달아 실행되는데, 이때는 case 값과는 상관없이 실행된다.
* Java12 이후부터는 switch문에서 새로운 형식이 생겼다. (Break 쓸 필요 없어짐)
Ex)	switch(변수) {
		case 'A', 'a' -> {
			수행내용;
		}
		default -> {
			수행내용;
		}
	}



4-4 for 문

Ex)	for(int i = 1; i < 10; i++) {
		수행내용;
	}

* for 문을 사용할때 초기화식에서 부동소숫점 float을 사용하면 안된다. float은 정확한 0.1 이 아니기때문에 오차가 발생할 수 있다.



4-5 while 문

Ex)	while(조건식) {
		조건식이 true일 경우 실행할 내용;
	}
* 조건식이 false일 경우 실행종료
* while 문은 조건식이 true이면 무한루프이기 때문에 실행문에 증감식같은 것을 넣어 무한루프를 끊어줄 것이 필요하다.



4-6 do-while 문

do-while문은 while문과 동일하지만, 실행문을 먼저적고 조건식을 나중에 쓰는것에 대해 차이점이 있다.
Ex)	do {
		실행문;
	} while (조건식);
* while뒤에 반드시 세미콜론 (;)을 붙여야 한다.



4-7 break 문

* break문은 반복문을 실행 중지하거나 조건문인 switch 문을 종료할때 사용한다.
* 중첩 반복문일 경우 break문은 가장 가까운 반복문만 종료시키지만 반복문을 만들때 라벨을 붙이고 break 라벨명; 을 하면 바깥 중첩문
까지 종료시킨다.
Ex)	JungLee: for(...) {
		for(...) {
			break JungLee;
		}
	}



4-8 continue 문

* continue문은 반복문에서만 사용하는데, continue; 를 사용하면 그 즉시 반복문의 조건식으로 이동을하여 반복을 다시한다.
* 예제는 이클립스 섹션을 참고하여 복습하자. 
 