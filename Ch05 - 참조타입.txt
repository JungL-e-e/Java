5-1 데이터 타입 분류

데이터 타입
1. 기본 타입
	1. 정수타입
		byte, char, short, int, long
	2. 실수타입
		float, double
	3. 논리타입
		boolean
2. 참조 타입
	1. 배열타입
	2. 열거타입
	3. 클래스
	4. 인터페이스

* 객체란? 객체 = 데이터(필드) + 메소드 (실행 블록을 가지고 있고 호출에 의해 실행되는 프로그램)  
* 기본 타입 변수는 값 자체를 저장하고 있지만, 참조 타입 변수는 객체가 생성된 메모리 번지를 저장한다.(주소값)
* 변수들은 stack 영역에 생성되지만, 참조 타입 변수는 heap 영역의 객체 번지를 stack에 저장한다.




5-2 메모리 사용 영역

메모리 영역
1. 메소드 영역 (Method Area)
	바이트코드 파일을 읽은 내용이 저장되는 영역 (클래스별로 상수, 정적 필드, 메소드 코드, 생성자 코드 등이 저장된다.)

2. 힙 영역 (Heap Area)
	객체가 생성되는 영역

3. 스택 영역 (Stack Area)
	메소드를 호출할 때마다 생성되는 프레임이 저장되는 영역
	* 메소드 호출이 끝나면 프레임은 자동으로 제거가 된다.



5-3 참조 타입 변수의 ==, != 연산

참조 타입 변수의 ==, != 연산자는 번지를 비교하는 것이 된다. (번지가 같다면 동일한 객체를 참조하는 것)
* new 함수는 새로운 객체를 만들어내는 함수이다.



5-4 Null 과 NullPointerException

* null = 참조 타입 변수가 아직 번지를 저장하고 있지 않다.
* null 도 초기값으로 사용가능 - 객체를 생성하지 않고(힙 영역x) 스택 영역에 생성

NullPointerException
* null인 상태에서의 객체의 데이터나 메소드를 사용할때 생기는 예외

* 변수에 null 을 대입하면 번지를 잃어버린다.
Ex)	String hobby = "여행";
	hobby = null; // 여행이란 변수가 들어있는 객체를 잃어버림
* 객체는 힙 메모리에 있지만, 위치 정보를 모르기 때문에 쓰레기 객체가 되며 쓰레기 수집기를 실행시켜 자동으로 제거한다.
다음과 같은 경우도 여행이라는 객체가 쓰레기 객체가된다.
Ex)	String hobby = "여행";
	hobby = "게임";



5-5 문자열타입

1. 문자열 생성
Ex)	String name = "이정";

2. 문자열 비교
Ex)	String name1 = "이정";
	String name2 = "이정";
* 이 경우는 heap 영역에서 "이정"을 담고 있는 동일한 객체 번지가 name1, name2 에 저장된다.
* 따라서 name1 == name2 // true 이다.

Ex)	String name1 = new String("이정");
	String name2 = new String("이정");
* 이 경우는 서로 다른 String 객체를 가지게 된다.
* 따라서 name1 == name2 // false 이다.

* equals() 메소드 - 다른 객체여도 상관없이 내부 문자열만을 비교할때 쓰는 메소드
Ex)	boolean result = str1.equals(str2);

3. 문자 추출
* charAt() 메소드 - 특정 위치의 문자 추출
Ex)	String subject = "자바 프로그래밍";
	char charValue = subject.charAt(3); // '프'가 나옴

4. 문자열 길이
* length() 메소드 - 문자 개수 추출
Ex)	String subject = "자바 프로그래밍";
	int length = subject.length(); // 8이 나옴

5. 문자열 대체
* replace() 메소드 - 특정 문자열 다른 문자열로 대체
Ex)	String oldStr = "자바 프로그래밍";
	String newStr = oldStr.replace("자바", "JAVA");
* String 객체의 문자열은 변경이 불가능 하기때문에 replace 메소드는 newStr을 새로 만들어서 값을 넣은 것이다.

6. 문자열 잘라내기
* substring() 메소드 - 특정 위치의 문자열 잘라내어 가져오기
Ex)	String ssn = "1234567-8901234"
	String firstNum = ssn.substring(0, 6); // 0부터 6위치 사이 (6은 미포함)
	String secondNum = ssn.substring(7); // 7위치부터 끝까지

7. 문자열 찾기
* indexOf() 메소드 - 특정 문자열의 위치 찾기
Ex)	String subject = "자바 프로그래밍";
	int index = subject.indexOf("프로그래밍"); // 프로그래밍의 앞글자인 프의 위치 3이 기록된다.
* 만약 동일한 문자열이 없다면 값은 -1을 저장한다. (만약 -1이 뜨면 그 문자열을 포함하지 않는다는 뜻이다.)

8. 문자열 분리
* split() 메소드
Ex)	String board = "번호, 제목, 내용, 성명";
	String[] arr = board.split(","); // are = ["번호", "제목", "내용", "성명"]



5-6 Array Type

* 연속된 공간에 값을 나열시키고 각 값의 인덱스(위치)를 부여해 놓은 자료구조
* 배열은 같은 타입의 값만 관리
* 배열의 길이는 늘리거나 줄일 수 없다.

1. 배열 변수 선언
	* 타입[] 변수;				*타입 변수[];	
Ex)	int[] intArray;				int intArray[];
	double[] doubleArray;			double doubleArray[];
	String[] strArray;			String strArray[];

* str처럼 배열도 null 값이 동일하게 적용됨.

2. 값 목록으로 배열 생성
Ex)	타입[] 변수 = {값0, 값1, 값2, 값3, ...};

* 변수 선언후에 따로 대입을 하려면 new 메소드를 사용해야한다. 호출도 컴파일 에러가 뜨므로 new 사용!!!!
	타입[] 변수;
	변수 = {값0, 값1, 값2, 값3 ...}; // 컴파일 에러

	타입[] 변수;
	변수 = new 타입[] {값0, ...};

3. new 연산자로 배열 생성
	* 타입[] 변수 = new 타입[길이];
	* 타입[] 변수 = null;
	  변수 = new 타입[길이]; // 에러 안남.

	* new 연산자로 배열을 생성하면 초기값이 생긴다.
		정수 배열 = 0, 실수 배열 = 0.0, 논리 배열 = false, 참조배열 = null, char[] = '\u0000'

4. 배열 길이
	* 배열변수.length; // String 에서는 .length() 이지만 배열은 그냥 length 이다.
	* 읽기만 가능하고 길이 수정은 불가능




5-7 다차원 배열
* 변수[1차원인덱스][2차원인덱스]...[N차원인덱스]

1. 값 목록으로 다차원 배열 생성
Ex)	int[][] scores = {{80,90,100}, {70,60}};
	* 70을 꺼내려면 scores[1][0]; // 70호출
	* score.length = 1차원 배열길이
	  score[0].length = 2차원 첫번째 배열길이
	  score[n][0].length = 3차원 첫번째 배열길이

2. new연산자로 다차원 배열 생성
Ex)	int[][] scores = new int[2][3];
	* 1차원은 길이2, 2차원들의 길이는 각각 3
	* 2차원의 배열 길이를 다르게 하고싶으면 아래처럼 해라.
		int[][] scores = new int[2][];
		scores[0] = new int[3];
		scores[1] = new int[2];



5-8 객체를 참조하는 배열
* 참조타입(클래스, 인터페이스) 배열은 각 항목에 객체의 번지를 저장
Ex)	String[] strArray = new String [3];
	strArray[0] = "Java";
	strArray[1] = "new String["Java"];
	strArray[2] = "Java"; // [0] == [2] > True, [0] == [1] > false이다.



5-9 배열복사
* for 문을 이용해서 간단하게 복사 가능 이클립스 참조.

* arraycopy() 메소드
Ex)	System.arraycopy(원본 배열, 원본 배열 복사 시작 인덱스, 새 배열, 새 배열 붙여넣기 시작 인덱스, 복사 항목 수);
	System.arraycopy(arr1, 0, aar2, 0, aar1.length);



5-10 배열 항목 반복을 위한 향상된 for 문
Ex)	for( 타입 변수: 배열) {
		실행문;
	}
* 예시는 이클립스 참고



*** 5-11 main()메소드의 String[]매개변수 용도
* 왜 main()함수의 String[]args 매개변수가 쓰일까?

*** 5-12 열거(Enum) 타입
* 봄,여름,가을,겨울 또는 월,화,수,목,금,토,일 처럼 한정된 변수를 가지는 참조변수를 열거타입변수라고 한다.


