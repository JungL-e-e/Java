8-1 인터페이스 역할

* 두 객체를 연결하는 접속기를 말한다.
* 인터페이스는 a 에 속해있는 b와 c 를 교체할때마다 a를 번거롭게 바꾸지않기위해 중간에 인터페이스를 넣어 인터페이스가 b c로 바꿀 수 있게 중간다리 역할을 한다.
--------------------------------------------------------------
이 둘의 공통점은 메서드의 선언만 있고, 구현 내용이 없다는 것입니다. (추상 메서드)

new 키워드를 통해 객체를 생성할 수 없으며, 상속받은 클래스가 반드시 선언된 추상 메서드를 구현하도록 한다는 것입니다.
차이점으로는 추상 클래스는 extends 키워드를 사용하여 상속하며, 다중 상속은 불가능합니다. 반면 인터페이스는 implements 키워드를 사용하여 상속하며, 다중 상속이 가능합니다.
또 추상 클래스는 일반 변수, 생성자, 일반 메서드, 추상 메서드를 모두 가질 수 있는 반면 인터페이스는 상수와 추상 메서드만 가질 수 있고, 생성자와 일반 변수는 가질 수 없습니다.

개념적 차이점이 아닌 실제 적용하는 것에서 차이점을 생각해보면,
추상 클래스는 extends(상속, 확장의 느낌) 키워드 그대로 자신의 기능들을 하위로 확장시키는 것으로 볼 수 있습니다.
인터페이스는 implements(상속, 구현의 느낌) 키워드처럼 인터페이스에 정의된 메서드를 각 클래스의 목적에 맞게 동일한 기능으로 구현하는 것으로 볼 수 있습니다.

또 다른 관점에서는 추상 클래스는 이를 상속할 각 객체들의 공통점을 찾아 추상화시켜놓은 것으로 상속 관계를 타고 올라갔을 때, 같은 부모 클래스를 상속하며, 부모 클래스가 가진 기능들을 구현해야 하는 경우에 사용합니다.

반면 인터페이스는 상속 관계를 타고 올라갔을 때, 다른 부모 클래스를 상속하더라도 같은 기능이 필요한 경우에 사용됩니다.

***
정리하자면 자바의 특성상 한 개의 클래스만 상속이 가능하기 때문에 해당 클래스의 구분을 추상 클래스 상속을 통해서 해결하고, 할 수 있는 공통된 기능들을 인터페이스의 다중 상속을 통해 구현합니다.


***
상위 클래스는 다중 상속이 불가능하기 때문에 하나의 클래스에서 하위 클래스에 물려줄 특성이 풍부할수록 좋고, 인터페이스는 다중 상속이 가능하기 때문에 각각의 인터페이스는 목적에 맞는 최소한의 메서드(구현을 강제할)를 선언하는 것이 좋습니다.

---------------------------------------------------------------
8-2 인터페이스와 구현 클래스 선언

interface 인터페이스명 { ... }
public interface 인터페이스명 {...}


* 구현된 객체
public class B implements 인터페이스명 {...}

* 인터페이스도 하나의 타입이므로 변수의 타입으로 사용 가능
* 구현 객체를 인터페이스 변수에 대입가능 (자동변환처럼)
ex)	RemoteControl rc = new Television();




8-3 상수 필드

* 인터페이스는 상수 필드를 멤버로 가질 수 있다.
* 인터페이스에 선언된 필드는 모두 public static final 특성을 갖고 있기 때문에, 생략해도 자동으로 상수로 지정된다.



8-4 추상 메소드

* 인터페익스는 추상 메소드를 멤버로 가질 수 있다.
* 메소드만 정의하고 {}를 붙이지 않아도 자동으로 컴파일된다.


8-5 디폴드 메소드

* 인터페이스의 디폴트 메소드는 디폴드를 생략해서는 안된다.



8-6 정적 메소드

* public, private static 리턴타입 메소드명(매개변수) {..}



8-7 private 메소드

* 디폴트와 정적 메소드들의 중복 코드를 줄이기 위해서?
* 아 인터페이스에 여러 메소드들이 공통된 실행내용을 가질때 그걸 하나로 묶기위해 사용함



8-8 다중 인터페이스 구현

* 인터페이스는 여러 개의 인터페이스를 implements 할 수 있다.



8-9 인터페이스의 상속

* 인터페이스도 다른 인터페이스를 상속할 수 있으며, 다중 상속 허용한다.
ex)	public interface 자식인페 extends 부모인페1, 부모인페2 {...}


* 만약 어느 클래스가 어떤 인터페이스를 인용했을때, 그 인터페이스가 부모 인터페이스가 있으면 클래스가 모두 정의를 해주여야 한다.



8-10 타입 변환

* 상속과 마찬가지로, 인터페이스의 타입변환은 인터페이스와 구현 클래스 간에 발생
ex)	interface a = new B(); (B는 클래스)

* 반대로 인터페이스에서 클래스로 변환하고 싶으면 캐스팅으로 강제타입변환해야한다.
ex)	RemoteControl rc = new Television();
	rc.turnOn();
	rc.turnOff();
	rc.setVolume(5);

	Television tv = (Television)rc;
	tv.turnOn();
	tv.turnOff();
	tv.setVolume(5);
	tv.setTime();
	tv.record();




8-11 다형성

* 상속과 같음



8-12 객체 타입 확인

* 상속과 같음


8-13 봉인된 인터페이스
ex)	public sealed interface InterfaceA permits InterfaceB {...}
	= A의 자식은 B만 가능

	public non-sealed interface InterfaceB extends InterfaceA {...}
	= B는 봉인을 해제하며 다른 자식 인터페이스를 만들 수 있다.


