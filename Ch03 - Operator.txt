3-1 부호, 증감 연산자

부호연산자	1. +피연산자	부호유지
	2. -피연산자	부호변경
* 정수 타입(byte, short, int) 연산의 결과는 int타입이다. 따라서 부호연산을 사용하려면 int를 사용해주어야 한다.
* 하지만 long이 있으면 자동으로 연산결과 타입은 int 가아닌 long 으로 된다.

증감연산자 1. ++피연산자	피연산자의 값 1증가
	2. --피연산자	피연산자의 값 1감소
	3. 피연산자++	다른 연산 수행 후 값 1증가
	4. 피연산자--	다른 연산 수행 후 값 1감소

* 증감연산자가 단독으로 쓰였을경우에는 변수 앞뒤 어디에 붙든 결과는 동일하다.



3-2 산술 연산자

1. +	덧셈
2. -	뺄셈
3. *	곱셈
4. /	나눗셈
5. %	나머지



3-3 오버플로우 & 언더플로우

* 타입의 최댓값을 벗어나면 그 타입의 최솟값으로 서로 이동하는것
Ex)	byte val = 127;
	val++;
	System.out.println(val);	== -128
* 연산과정에서 int타입의 범위를 넘을 것 같은 경우 미리 long을 써주어서 계산의 착오가 생기지 않도록 주의하자



3-4 정확한 계산은 정수 연산으로

* 부동 소수점 방식을 사용하는 실수타입은 아주 미세한 차이값이 있기때문에 정확한계산을 위해서는 정수로 계산하자



3-5 나눗셈 연산 후 NaN과 Infinity 처리

* 나눗셈또는 나머지 연산에서 우측 피연산자가 0 일경우 예외가 발생(ArithmeticException)
* 하지만 좌측 피연산자가 실수이거나 우측 피연산자가 0.0 또는 0.0f일 경우 예외가 아닌 Infinity 또는 NaN이 된다.
* Double.isInfinite() / Double.isNaN() = infinite 또는 NaN인지 확인하는 문법



3-6 비교 연산자

1. ==	같다
2. !=	다르다
3. >
4. >=
5. <
6. <=

* 피연산자의 타입이 다를 경우 비교 연산을 수행전에 타입을 자동으로 일치 시켜준다. (Char 타입은 유니코드로 숫자로 변환)
* 0.1f == 0.1		// false 산출 - float과 double의 정밀도 차이가 있기때문에 값이 틀리다.
* 0.1f == (float)0.1 	// true 산출

* 문자열 비교는 equals() 와 !equals()을 사용
Ex)	boolean result = str1.equals(str2);



3-7 논리 연산자

1. &&, &	And	둘다 true여야만 true
2. ||, |	Or	둘중 하나만 true여도 true
3. ^		Xor	둘의 결과가 달라야 true
4. !		Not	결과의 반대
* 주로 조건문, 반복문에서 사용
* true와 false를 비교할때 사용

3-8 비트 논리 연산자

1. &	And
2. |	Or	
3. ^	Xor	비트가 서로 다를경우
4. ~	Not	보수
* 비트 논리 연산이 필요한 이유?	C언어에 uint8_t 타입이 있는데 1byte범위가 양수인 0~255이다. 
하지만 자바는 -128 ~ 127이기 때문에 서로 다른수로 읽게된다. -120이라는 수를 c프로그램으로 바꾸려면 255와 논리곱(&)연산을 수행하면 된다. 또는 Byte.toUnsigndInt()문법을 사용해준다 - 내가보기엔 별로 안중요함.



3-9 비트 이동 연산자

1. a << b	정수 a의 각비트를 b만큼 왼쪽이동	* 오른쪽 빈자리 0 채우기	
2. a >> b	정수 a의 각비트를 b만큼 오른쪽이동	* 왼쪽 빈자리 최상위 부호 비트와 같은 값으로 채움
3. a >>> b	정수 a의 각비트를 b만큼 오른쪽이동	* 왼쪽 빈자리 0 채우기
Ex)	1 << 3 = 1 x 2^3 = 8
	-8 >> 3 = -8 / 2^-3 = -1	* Math.pow(2, 3) == 2^3 (double값 산출하기때문에 int로 바꿔줘야함)
	-8 >>> 3 = 536870911

3-10 대입 연산자

 1. =
 2. +=
 3. -=
 4. *=
 5. /=
 6. %=
 7. &=
 8. |=
 9. ^=
10. <<=
11. >>=
12. >>>=

Ex)	result /= 3;	// result / 3 = result;
	result >>>= 3;	// result >>> 3 = result;

3-11 삼항(조건) 연산자

(조건식) ? (조건이 참일경우 1번째 조건 실행) : (조건이 거짓일 경우 2번째 조건 실행)
Ex)	int score = 85;
	char grade = (score > 90) ? 'A' : ((score > 80) ? 'B' : 'C');

3-12 연산의 방향과 우선순위

1. 증감(++,--), 부호(+,-), 비트(~), 논리(!)
2. 산술(*, /, %)
3. 산수(+, -)
4. 쉬프트(<<, >>, >>>)
5. 비교(<, >, <=, >=, instanceof)
6. 비교(==, !=)
7. 논리 (&, ^, |, &&, ||)
8. 조건(?:)
9. 대입(=, +=, -=...등등)
					