17-1 스트림이란?
* 지금까지 컬렉션 및 배열에 저장된 요소를 반복 처리하지 위해선 for문이나 Iterator 사용
* 하지만 Java 8 부터 컬렉션 및 배열의 요소를 반복 처리하기 위해 스트림을 사용할 수 있다.
* 기능적인 측면에서 스트림은 컬렉션(배열 포함)의 저장 요소를 하나씩 참조해서 람다식으로 처리할 수 있도록 해주는 반복자입니다.
필맵솔루(픽폴이치)매집

ex1)	List - for 문
	List<String> list = ...;
	for(int i = 0; i<list.size(); i++) {
		String item = list.get(i);
		//아이템 처리
	}

ex2) 	Set - Iterator 문
	Set<String> set = ...;
	Iterator<String> iterator = set. iterator();
	while(iterator.hasNext()) {
		String item = iterator.next();
		//요소 처리
	}


이것을 이제 스트림을 사용하면,
ex)	Stream<String> stream = list.stream();
	stream.forEach( item -> // item 처리);
	* stream() 메소드로 객체를 얻고 forEach() 메소드로 요소를 어떻게 처리할지 람다식 제공

Stream 과 Iterator 차이점

1. 내부반복자이므로 처리속도가 빠르고 병렬 처리에 효율적
2. 람다식으로 다양한 요소 처리 정의 가능
3. 중간 처리와 최종처리를 수행하도록 파피프 라인 형성 가능


17-2 내부 반복자
*for문과 Iterator은 요소를 컬렉션 바깥쪽으로 반복해서 가져와 처리하지만, 스트림은 내부에서 처리한다.
* Iterator은 next() 메소드로 요소를 직접 밖으로 꺼낸다.

ex)	List<String> list = new ArrayList<>();
	Stream<String> parallelStream = list.parallelStream();
	parallelStream.forEach( name -> { 처리내용; } );



17-3 중간 처리와 최종 처리
* 스트림은 하나 이상 연결 가능
* 스트림이 연결되어 있는 것을 스트림 파이프라인이라고 함.
* 오리지널 스트림과 집계처리 사이에 중간 스트림들은 필터링(요소 걸러내기), 매핑(요소변환), 정렬작업을 수행
* 최종 스트림은 집계(카운팅, 총합,평균) 작업을 수행

ex)	Student 객체를 컬렉션으로 Student Stream을 얻은후 중간처리로 score 스트림으로 변환 후 최종 집계처리로 score 평균 구하는 과정

	Stream<Student> studentStream = list.stream();
	IntStream scoreStream = StudentStream.mapToInt( student -> student.getScore() ): // Student 객체를 										getScore() 메소드의 리턴값으로 매핑
	double avg = scoreStream.average().getAsDouble();

* mapToTint() 메소드는 객체를 int 값으로 매핑해서 InsStream으로 변환
* average() 메소드는 요소들의 평균 값 계란
* 메소드 체이닝 패턴을 이용하면 간결하게 작성
ex)	double avg = list.stream()
		.mapToInt(Student -> Student.getScore())
		.average()
		.getAsDouble();
* 최정 처리부분인 average() 이하를 생략하면 그 위에 mapToInt 와 Stream은 동작하지 않음


17-4 리소스로부터 스트림얻기
* java.util.stream 패키지에는 스트림 인터페이스들이 있다.
* BaseStream 인터페이스를 부모로 한 자식 인터페이스들은 이런 상속 관계
	BaseStream 	- Stream
			- IntStream
			- LongStream
			- DoubleStream
리턴 타입		메소드(매개변수)				리소스
Stream<T>	java.util.Collection.stream()		List 컬렉션
		java.util.Collection.parallelStream()	Set 컬렉션
Stream<T>	Arrays.stream(T[]), Stream.of(T[])	배열
IntStream	Arrays.stream(int[]), IntStream.of(int[])
LongStream	Arrays.stream(long[]), LongStream.of(long[])
DoubleStream	Arrays.stream(double[]), DoubleStream.of(double[])
IntStream	IntStream.range(int, int)		int 범위
		IntStream.rangeClosed(int,int)		int 범위
LongStream	LongStream.range(long, long)		long 범위
		LongStream.rangeClosed(long,long)	long 범위
Stream<Path>	Files.list(Path)			디렉토리
Stream<String>	Files.lines(Path, Charset)		텍스트파일
DoubleStream	Random.doubles(...)			랜덤수
IntStream	Random.ints()
LongStream	Random.longs()


1. 컬렉션으로 부터 스트림 얻기
ex)	Stream<Product> stream = list.stream();
	stream.forEach(p -> System.out.println(p));

2. 배열로부터 스트림 얻기
ex)	String[] strArray = { "1" , "2", "3" };
	Stream<String> strStream = Arrays.stream(strStream);
	strStream.forEach(item -> System.out.print(item + "," ));

3. 숫자범위로부터 스트림얻기
ex)	IntStream stream = IntStream.rangeClosed(1, 100);
	stream.forEach(a -> sum += a);

4. 파일로부터 스트림 얻기
ex)	*throws Exception
	Path path = Paths.get(StreamExample.class.getResource("data.txt").toURI());	// data.txt 파일 경로 객체
	Stream<String> stream = Files.lines(path, Charset.defaultCharset());	
	stream.forEach(line -> System.out.println(line));
	stream.close();



17-5 필터링
1. distinct()	- 중복제거	// * 객체 스트림일 경우 equals() 메소드의 값이 true 이면 동일한 요소로 판단
2. filter(Predicate<T>)	// 매개값으로 주어진 Predicate 가  true를 리턴하는 요소만 필터링 한다.
   filter(IntPredicate)
   filter(LongPredicate)
   filter(DoublePredicate)
	
* Predicate는 함수형 인터페이스로
	Predicate<T>	boolean test(T t)
   	IntPredicate	boolean test(int value)
   	LongPredicate	boolean test(long value)
   	DoublePredicate boolean test(double value)

* Predicate<T> 를 람다식으로 표현하면
	T -> { ... return true}
	T -> true;	// return 문만있을경우 생략 가능

ex)	List<String> list = new ArrayList<>();

	list.stream().distinct()

	list.stream().filter(n -> n.startWith("신")).forEach(n -> System.out.println(n));	
		// 신으로 시작하는 요소만 필터링


17-6 요소변환(매핑)
1. mapXxx()
2. asDoubleStream()	- 데이터들을 double로
   asLongStream()	- 데이터들을 long으로
   boxed()	- 데이터들은 box형식으로 바꿈(Integer, Long, Double)
   flatMapXxx()	- 요소를 복수 개의 요소로 변환
* 메소드 종류들은 책을 참조(mapXxx() 메소드와 Function 인터페이스)

1. 요소를 복수 개의 요소로 변환
* flatMap() 사용
* 추가 공부 필요



17-7 요소 정렬
리턴타입		메소드			설명
Stream<T>	sorted()		Comparable 요소를 정렬한 새로운 스트림 생성
Stream<T>	sorted(Comparator<T>)	요소를 Comparator에 따라 정렬한 새 스트림 생성
DoubleStream	sorted()		올림차순
IntStream	sorted()		올림차순
LongStream	sorted()		올림차순

1. Comparable 구현 객체의 정렬
* 공부 필요

2. Comparator을 이용한 정렬
* 공부 필요


17-8 요소를 하나씩 처리(루핑)
* 루핑은 스트림에서 요소를 하나씩 반복해서 가져와 처리하는 것
1. peek()	- 중간처리 메소드(최종처리 메소드가 붙지않으면 동작하지 않음)
2. forEach()	- 최종처리 메소드


17-9 요소 조건 만족 여부(매칭)
* 요소들이 특정 조건에 만족하는지 여부를 조사하는 최종 처리기능
1. allMatch()	- 모두
2. anyMatch()	- 어느하나라도
3. noneMatch()	- 아무도


17-10 요소 기본 집계
* 최종 처리 집계
1. count()	- 요소개수
2. findFirst()	- 첫번째요소
3. max()	- 최대요소
4. min() 	- 최소요소
5. average()	- 요소평균
6. sun()	- 요소총합

1. Optional 클래스
* 단순히 집계값만 저장하는것이 아닌, 집계값이 존재하지 않을 경우 디폴트 값을 설정하거나 처리하는 Consumer을 등록 가능
* 공부 필요


17-11 요소 커스텀 집계
1. reduce()	- 공부필요


17-12 요소 수집
* collect()는 요소들을 필터링, 매핑한후 수집하는 최종 처리메소드

1. 필터링한 요소 수집
* Stream 의 collect(Collector<T, A, R> collectot) 메소드는 필터링 또는 매핑된 요소들을 새로운 컬렉션에 수집하고 리턴

2. 요소 그룹핑
1. groupingBy() 메소드	- 요소들을 그룹핑해서 Map 객체를 생성하는 기능


17-13 요소 병렬 처리
* 요소 병렬 처리란 멀티코어 cpu 환경에서 전체 요소를 분할해서 각각의 코어가 병렬적으로 처리한느 것

1. 동시성과 병렬성
* 멀티스레드는 동시성 또는 병렬성으로 실행됨. 
동시성 - 멀티스레드가 하나의 코어로 번갈아 가며 실행
병렬성 - 멀티 코어를 각각 이용하여 병렬로 실행
데이터 병렬성 - 전체 데이터를 분할해서 서브 데이터셋으로 만들고 이 서브데이터셋들을 병렬처리해서 빨리 끝내는 것
작업 병렬성 - 서로 다른 작업을 병렬 처리하는 것

1. 포크조인 프레임워크
* 자바 병렬 스트림은 요소들을 병렬 처리하기 위해 포크조인 프레임워크를 사용한다. 
* 공부 필요

2. 병렬 스트림 사용
	1. parallelStream()
	2. parallel()

요약하자면, 일반 스트림보다 병렬처리 스트림이 소모시간이 더 적다.


------------------------------------------------------------------------------------------------------------- 

*** 스트림
* 여러 종류(List, Set, Map, 배열)의 데이터 소스를 스트림을 만들어 표준화된 방법으로 다룰 수 있게된다.
- 스트림의 기능 : 중간연산, 최종연산
* 중간연산 : 연산결과가 스트림, 반복적으로 적용가능(0~n번)
* 최종연산 : 연산결과가 스트림이 아닌 연산, 단 한번만 적용가능(스트림의 요소를 소모, 0~1번) - 최종연산이 한번되면 스트림이 닫혀서 다시 스트림을 만들어야 사용 가능하다.

- 스트림의 특징 : 원본변경 안함(readonly), 일회용(like iterator 필요하면 다시 생성), 최종연산 전까지 중간연산이 수행되지 않음, 일종의 표시만 해둠(지연된 연산)
- 내부반복자를 사용함
- 스트림의 작업을 병렬로 처리 : 병렬스트림 parallel()

- 기본형 스트림 - Stream<Integer> 대신에 사용 : IntStream, LongStream, DoubleStream
* 오토박싱&언박싱의 비효율 제거(Stream<Integer> -> IntStream)
* 숫자와 관련된 유용한 메서드 Stream<T>보다 더 많이 제공
-------------------------------------------------------------------------------------------------------------
1. 스트림 생성
2. 중간연산
3. 최종연산
ex)	stream.distinct().limit(5).sorted().forEach(System.out::println)

1. Collection(List, Set)으로 스트림 만들기
ex)	Stream<E> stream()

	List<Integer> list = Arrays.asList(1,2,3,4,5);
	Stream<Integer> intStream = list.stream();	// list를 기반으로 stream 제조

	intStream.forEach(System.out::print);	// 12345 출력. 이제 intStream 은 닫혀서 사용 불가
  
2. 배열로 스트림 만들기
ex)	- 객체 배열
	Stream<T> Stream.of(T... values)	// 가변인자
	Stream<T> Stream.of(T[])
	Stream<T> Arrays.stream(T[])
	Stream<T> Arrays.stream(T[] array, int startInclusive, int endExclusive)

	Stream<String> strStream = Stream.of("a","b","c");
	Stream<String> strStream = Stream.of(new String[]{"a","b","c"});
	Stream<String> strStream = Arrays.stream(new String[]{"a","b","c"});
	Stream<String> strStream = Arrays.stream(new String[]{"a","b","c"}, 0, 3);
	
	- 기본형 배열
	IntStream IntStream.of(int... values)
	IntStream IntStream.of(int[])
	IntStream Arrays.stream(int[])
	IntStream Arrays.stream(int[], int startInclusive, int endExclusive)

3. 난수 스트림 만들기
ex)	IntStream intStream = new Random().ints(4);	// 크기가 4인 난수 스트림을 변환

	IntStream ints(int begin, int end)	// 무한 스트림
	LongStream longs(...)
	DoubleStream doubles(...)

	IntStream ints(long streamSize, int begin, int end)	// 유한 스트림
	LongStream longs(...)
	DoubleStream doubles(...)

* 	Integer.MIN <= ints() < Integer.MAX
	Long.MIN <= longs() < Long.MAX
	0.0 <= doubles() < 1.0

4. 특정 범위의 정수를 요소로 갖는 스트림
ex)	IntStream IntStream.range(int begin, int end)	// end 미포함
	IntStream IntStream.rangeClosed(int begin, int end)	// end 포함

5. 람다식을 이용하여 스트림 만들기	- 무한스트림
ex)	static <T> Stream<T> iterate(T seed(초기값), UnaryOperator<T> f)	// 이전 요소렝 종속적
	static <T> Stream<T> generate(Supplier<T> s)			// 이전 요소에 독립적
			* 주기만 하는것 입력x, 출력o
	Stream<Integer> evenStream = Stream.iterate(0, n -> n+2);	// 0,2,4,6
* iterate 는 seed를 이용하여 다음 요소를 계산
* generate()는 seed를 사용하지 않는다.
ex)	Stream<Double> randomStream = Stream.generate(Math::random);

6. 파일과 빈 스트림
* 위 참조
-------------------------------------------------------------------------------------------------------------

** 스트림의 연산
1. 중간연산 - 연산결과가 스트림, 반복 사용 가능
ex)	stream.filter(Predicate<T> predicate(조건식));	//걸러내기
	stream.distinct();	//중복제거
	stream.sorted() / stream.sorted(Comparator<T> comparator);		//정렬
	stream.limit(5);	//자르기
	stream.peek(Consumer<T> action);	// 중간 작업 결과 확인
	stream.skip(long n)	// 건너뛰기
	stream.map(Function<T,R> mapper) / mapToDouble, mapToInt, mapToLong	// 스트림 요소 변환
	stream.flatMap(Function<T,Stream<R>> mapper), flatMapToDouble, flatMapToInt, flatMapToLong// 스트림 요소변환
	
2. 최종연산 - 한번만, 스트림 종료
ex)	void forEach(Consumer<? super T> action)	/ forEachOrdered (순서유ㅜ지, 병렬스트림)
	long count()
	Optional <T> findAny()	/ findFisrt()	// 아무거나, 첫번째 요소 추출
	Optional <T> max(Comparator<? super T> comparator)	/ min(...)
	boolean allMatch(Predicate<T> p)	/ anyMatch, nonematch	// 매치되는지
	Object[] toArray()	// 배열로 전환
	Optional<T> reduce(BinaryOperator<T> accumulator)	// 스트림의 요소를 하나씩 줄여가면서 계산
	R collect(Collector<T,A,R> collector)	// 스트림의 요소를 수집

	* reduce(), collect() 핵심 요소임
-------------------------------------------------------------------------------------------------------------
* 스트림 중간연산
1. 스트림 자르기 - skip(), limit()
ex)	IntStream intStream = IntStream.rangeClosed(1,10);	// 12345678910
	intStream.skip(3).limit(5).forEach(System.out::print);	// 45678

2. 스트림 요소 걸러내기 - filter(), distinct()
ex)	Intstream.intStream = IntStream.of(1,2,2,3,3,3,4,5,6,6,);
	intStream.filter(i-> i%2==0).distinct().forEach(System.out::print);	//246
	* filter 두번 쓰면 and 조건, or조건은 한 filter 안에서 사용 가능)

3. 스트림 정렬 - sorted()(기본정렬), sorted(Comparator<? super T> comparator)(지정된 Comparator)
ex)	strStream.sorted()	// 기본정렬
	= sorted(Comparator.naturalOrder())
	= sorted((s1, s2) -> s1.compareTo(s2));
	= sorted(String::compareTo);

	strStream.sorted(Comparator.reverseOrder())
	= sorted(Comparator.<String>naturalOrder().reversed())

	strStream.sorted(String.CASE_INSENSITIVE_ORDER.reversed())	// 대소문자 구문안함

	strStream.sorted(Comparator.comparing(Sring::length).reversed())	// 길이순

4. Comparator의 comparing()
ex)	comparing(Function<T, U> keyExtractor)

	studentStream.sorted(Comparator.comparing(Student::getBan)).forEach(System.out::println);	//반별로정렬
* 추가적으로 정렬은 thencomparing()을 사용
	studentStream.sorted(Comparator.comparing(Student::getBan).thenComparing(Student::getName)).forEach	(System.out::println);

5. 스트림 요소변환 - map()
ex)	Stream<File> fileStream = Stream.of(new File("Ex1.java"), new File("Ex1"));
	Stream<String> filenameStream = fileStream.map(File::getName);
	filenameStream.forEach(System.out::println);

	fileStream.map(File::getName).filter(s -> s.indexOf('.')!= -1).map(String::toUpperCase).distinct	().forEach(System.out::print);

* mapToInt(), mapToLong(), mapToDouble()	- Stream<Interger> 이 아닌 IntStream, LongStream, DoubleStream 으로 변환한다

6. 스트림 엿보기 - peek()
ex)	fileStream.peek(s -> System.out.printf("filename =%s%n", s)).forEach(System.out::println);
* 최종연산이 없으면 중간연산도 출력되지 않는다!


7. 스트림의 스트림을 스트림으로 변환 - flatMap()
* 여러개의 문자 배열을 하나의 배열로 만들고 싶을때
	Stream<Stream<String>> strStrStrm = strArrStrm. Map(Arrays::stream);	
ex)	Stream<String> strStrStrm = strArrStrm.flatMap(Arrays::stream);

8. Optional<T>	- 래퍼클래스(Integer, Long 등등)
	public final class Optional<T> {
		private final T value;	// T타입의 참조변수 (모든 종류의 객체 저장 가능 + null)
			...
	}
* null을 간접적으로 다루기 위해 사용
* null체크 - if 문 필수 > 코드가 지저분해진다.

* null값이 나와도 Optional객체에 넣으면 nullpointexception이 발생하지 않는다

* Optional<T> 객체 생성하기
ex)	String str = "abc";
	Optional<String> optVal = Optional.of(str);
	Optional<String> optVal = Optional.of(null);	// 불가
	Optional<String> optVal = Optional.ofNullable(null);	// 가능

	Optional<String> optVal = Optional.<String>empty();	// <String> 생략가능 * null 로 초기화하면 안된다.

* Optional<T> 객체의 값 가져오기
ex)	String str1 = optVal.get();	// null 이면 예외
	String str2 = optVal.orElse("");	// null 일때 "" 반환
	String str3 = optVal.orElseGet(String::new);
	String str4 = optVal.orElseThrow(NullPointerException::new);	// null 이면 예외 발생

* .isPresent()	- null 이면 false, 아니면 true
ex)	Optional.ofNullable(str).ifPresent(System.out::println);	// null 이 아닐때만 작업 수행

* OptionalInt, OptionalLong, OptionalDouble - 성능을 올리기위해 Optional<T> 대신에 사용
	OptionalInt optval = OptionalInt.of(0);
ex)	Integer int1 = optval.getAsInt();
			     .getAsLong();
			     .getAsDouble();

* 빈 Optional 객체와의 비교
ex)	OptionalInt optval = OptionalInt.of(0);		//isPresent() - true
	OptionalInt optval = OptionalInt.empty();	//isPresent() - false	두개의 값은 같지만 동일하지는 않다

* Optional 객체도 Stream 처럼 가능
ex)	int result1 = Optional.of("123").filter(x->x.length() >0).map(Integer::parseInt).get();

-------------------------------------------------------------------------------------------------------------
** 스트림의 최종연산

1. 스트림의 모든 요소에 작업 수행 - forEach(), forEachOrdered()	//Ordered() 는 병렬 스트림인 경우에도 순서 보장
*	sequential()	- 직렬수행
	parallel()	- 병렬수행
ex)	IntStream.range(1,10).parallel().forEachOrdered()(System.out::print);	// 123456789

2. 조건 검사 - allMatch(), anyMatch(), noneMatch()
ex)	boolean allMatch (Predicate<? super T> predicate) 	// 모든 요소가 조건을 만족시키면 true
		anyMatch	// 어느 한 요소라도
		noneMatch	// 아무요소도 안만족
* allMatch()를 사용할때 맨앞요소부터 하나하나 시작하며, 만약 요소가 맞지않으면 그 뒤에 연산은 건너뛰고 바로 false를 리턴한다.

3. 조건에 일치하는 요소 찾기 - findAny(), findFirst()	// 아무거나 하나반환(병렬스트림에 사용), 첫번째요소 반환(순차 스트림에 사용)
ex)	Optional<Student> result = stuStream.filter(s->s.getTotalScore() <= 100).findFirst();

4. 요소를 하나씩 꺼내서 누적연산(accumulate - 누적하다) 수행 - reduce()	// 중요
* identity - 초기값
* accumulator - 수행할 연산
* combiner - 병렬처리된 결과를 합치는데 사용할 연산(병렬 스트림)
ex)	Optional<T> reduce(BinaryOperator<T> accmulator)
	Optional<T> reduce(T identity, BinaryOperator<T> accmulator)
	Optional<U> reduce(U identity, BiFunction<U,T,U> accumulator, BinaryOperator<U> combiner)

* 값이 하나도없으면 identity(초기값)이 반환되며, 초기값이 없다면 Optional<T> 로 null 이 반환
ex)	// int reduce(int identity, IntBinaryOperator op)
	int count = intStream.reduce(0, (a,b) -> a+1);
	int sum = intStream.reduce(0, (a,b) -> a+b);
	int max = intStream.reduce(Integer.MAX_VALUE, (a,b) -> a<b?a:b);

*	int a = identity;
	for(int b: stream)
		a = a + b; // sum()

* 초가값이 안들어가면 null 이 나올수도있으므로 OptionalInt를 써준다
ex)	OptionalInt max = intStream1.reduce(Integer::max);
-------------------------------------------------------------------------------------------------------------

** Collect() 는 Collector을 매개변수로 하는 스트림의 최종연산	- 그룹별로 리듀싱 가능하다(reduce와 달리 전체가 아닌)
ex)	Object collect(Collector collector)	// collector을 구현한 클래스의 객체를 매개변수로
* Collectors 클래스(다양한 기능의 컬렉터를 제공)
* collect() - 최종연산
* Collector - 인터페이스

1. 스트림을 컬렉션을 변환 - toList(), toSet(), toMap(), toCollection()
ex)	List<String> names = stuStream.map(Student::getName).collect(Collectiors.toList());
	ArrayList<String> list = names.stream().collect(Collectors.toCollection(ArrayList::new));
	Map<String,Person> map = personStream.collect(Collectors.toMap(p->p.getRegId(), p->p));	//
		Stream<person> -> Map<String, person>

2. 스트림을 배열로 변환 - toArray()
ex)	Student[] stuNames = studentStream.toArray(Student[]::new);
	Object[] stunames = studentStream.toArray();	// toArray 자체는 Object[] 로 반환하기때문에 Student[]를 안만들면 
		Object 지역변수를 사용

3. 스트림의 통계 - counting(), summingInt(),maxBy(), minBy(), ...
ex)	long count = stuStream.count();
	long count = stuStream.collect(Collectors.counging());	// 그룹별

	long totalScore = stuStream.mapToInt(Student::getTotalScore).sum();
	long totalScore = stuStream.collect(summingInt(Student::getTotalScore));	// 그룹별

	Optional<Student> topStudent = stuStream.collect(maxBy(Comparator.comparingInt(Student::getTotalScore)));

4. 스트림을 리듀싱 -Collectors.reducing() == (그룹별 리듀싱) /reduce() 와 비슷
ex)	OptionaInt max = intStream.reduce(Integer::max);
	Optional<Integer> max = intStream.boxed().collect(reducing(Integer::max));

5. 문자열 스트림의 요소를 모두 연결 - joining()
ex)	String studentNames = stuStream.map(Student::getName).collect(joinging());

--------------------------------------------------------------------------------------------------------------
** 스트림의 그룹화와 분할
1. partitioningBy() - 스트림을 2분할
2. groupingBy() - 스트림을 n분할

Collectors.groupingBy return Map<String, List<Student>> 

ex)	if It is students.stream().collect(Collectors.groupingBy(Studentee::getCourse)).forEach((src, res) -> System.out.println(src)); then the result is B. Java EE Java ME

if It is students.stream().collect(Collectors.groupingBy(Studentee::getCourse)).forEach((src, res) -> System.out.println(res)); then the result is A. [Java EE: Helen:Houston] [Java ME: Jessy:Chicago, Java ME: Mark:Chicago]