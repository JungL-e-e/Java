9-1 중첩 클래스

* 클래스 내부에 선언한 클래스
	클래스의 멤버를 쉽게 사용 가능
	외부에는 중첩 관계 클래스를 감춤

멤버클래스
1. 인스턴스 멤버 클래스
ex)	class A {
		class B { ... }
	}
2. 정적 멤버 클래스
	class A {
		static class B {...}
	}

로컬클래스
1. 	class A {
		void method() {
			class B { ... }
		}
	}

* A $ B .class  (멤버클래스)
* A $1 B .class (로컬)



9-2 인스턴스 멤버 클래스

1. public class B {}  	- 다른 패키지도 사용가능
2. class B {}		- 같은 패키지만 사용가능
3. private class B{}	- A 클래스 내부에서만 사용가능

* 인스턴스 필드값, 생성자, 인스턴스 메소드에서 생성가능
* B 객체를 A 외부에 생성하는법
	A a = new A();
	A.B b = a.new B();



9-3 정적 멤버 클래스

* 인스턴스와는 다르게 A객체 만들지 않고 생성 가능
	A.B b = a.new B();



9-4 로컬 클래스

* 로컬 클래스는 생성자와 메소드가 실행될 동안에만 객체를 생성가능
* 로컬 변수(생성자, 메소드의 매개변수, 내부에서 선언된 변수)를 로컬 클래스에서 사용할 경우 final 특성을 갖게됨.



9-5 바깥 멤버 접근

* 인스턴스 멤버 클래스는 모든 필드와 메소드를 사용
* 정적 멤버 클래스는 바깥 클래스의 정적필드와 정적메소드만 사용

바깥 클래스의 객체와 내부 클래스의 객체 명이 같으면
* 바깥 클래스이름.this.*** = 바깥 객체이다.
* this.*** = 내부 객체



9-6 중첩 인터페이스

class A {
	[public | private] [static] interface B {
		}
	}



9-7 익명 객체
* 명시적으로 클래스를 선언하지 않음. -필드값, 로컬 변수값, 매개변수값으로 주로 사용


1. 익명 자식 객체
ex)	new 부모생성자(매개값 , ...) {
	}
2. 익명 구현 객체
ex)	new 인터페이스() {
	} 
