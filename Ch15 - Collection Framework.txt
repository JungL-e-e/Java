* 인터페이스의 종류
1. List	= ArrayList, Vector, LinkedList - 순서가 있는 데이터의 집합, 데이터 중복 허용
2. Set	= HashSet, TreeSet - 순서가 없는 데이터의 집합, 중복 허용 x
3. Map	= HashMap, HashTable, TreeMap, Properties - Key 와 값(value) 의 쌍으로 이루어진 데이터의 집합, 
		순서는 없으며 키는 중복 x, 값은 중복 허용

* contains 메소드
ex)	data.contains("Jung")	// True, False, 반환

* replaceall 메소드
ex)	Collections.replaceALL(dataList, "jung", "Jung")	// jung 에서 Jung 으로 모두 바꿈

* remove 메소드
	1. remove(int index) = 해당 인덱스의 값이 삭제
	2. remove(Object O) = ArrayList에서 해당 객체를 찾아서 첫번째로 나오는 값만 삭제, 후에 삭제하면 True, 없으면
				False 반환
	3. list.remove(Integer.ValueOf(1));
	4. removeaAll() = 모두 삭제


15-1 Collection Framework
* 자바는 널리 알려져 있는 자료구조를 바탕으로 객체들을 효율적으로 추가, 삭제, 검색할 수 있도록 인터페이스와 클래스를 java.util 패키지에 포함 시켰다.
* 이것을 총칭하여 컬렉션 프래임워크라고 한다.
* List와 Set은 Collection 인터페이스로 정의해두었다.



15-2 List Collection
* List 컬렉션은 객체를 인덱스로 관리하기때문에 인덱스가 부여되고 인덱스로 객체를 검색, 삭제할 수 있는 기능을 제공한다.
	객체 추가 	- boolean add(E e) - 맨끝 추가
		- void add(int index, E element) - 인덱스에 객체 추가
		- set(int index, E element) - 인덱스의 객체를 새 객체로 바꿈
	객체 검색 	- boolean contain(Object o) - 주어진 객체 있는지 확인
		- E get(int index) - 주어진 인덱스에 저장된 객체를 리턴
		- isEmpty() - 컬렉션이 비어있는지 조사
	객체 삭제 	- void clear() - 모든객체 삭제
		- E remove(int index) - 주어진 인덱스에 저장된 객체를 삭제
		- boolean remove(Object o) - 주어진 객체를 삭제

1. ArrayList
* List에서 가장 흔함
* 일반배열과는 다르게 제한 없이 객체를 추가 가능
* List 컬렉션은 객체 자체를 저장하는 것이 아니라 객체의 번지를 저장
* 동일한 객체 중복 저장 가능
* null 저장 가능
ex)	List<E> list = new ArrayList<E>();	// E에 지정된 타입의 객체만 저장
	List<E> list = new ArrayList<>();	// E에 지정된 타입의 객체만 저장
	List list = new ArrayList();		// 모든 타입의 객체만 저장

* 인덱스의 객체가 제거되면 그 뒤에 있던 객체의 인덱스가 다 앞으로 1씩 당겨진다.
* 삽입하면 반대로 1씩 그 뒤에 있던 객체들이 밀어진다. ( 바람직하지 않기때문에 이런 경우 LinkedList를 사용)

2. Vector
* ArrayList와 동일한 내부 구조
* Vector은 동기화된 메소드로 구성 - 멀티 스레드가 동시에 Vector() 메소드를 실행할 수 없다.
* 멀티 스레드 환경에서 안전하게 객체 추가 또는 삭제 가능
ex)	List<E> list = new Vector<E>();	// E에 지정된 타입의 객체만 저장
	List<E> list = new Vector<>();	// E에 지정된 타입의 객체만 저장
	List list = new Vector();	

3. LinkedList
* 내부구조 위에와 다름
* 내부 배열에 객체를 저장하지만 인접 객체를 연결해서 관리
* 객체를 삽입하거나 삭제하면 바로 앞뒤 링크만 변경하면 되므로 좋은 성능 발휘
ex)	List<E> list = new LInkedList<E>();	// E에 지정된 타입의 객체만 저장
	List<E> list = new LinkedList<>();	// E에 지정된 타입의 객체만 저장
	List list = new LinkedList();		// 모든 타입의 객체만 저장



15-3 Set Collection
* 저장 순서를 유지하지 않음
* 중복 불가능
* 하나의 null 만 저장 가능
	객체 추가 	- boolean add(E e) - 객체를 성공적으로 저장하면 true, 중복이면 false
	객체 검색 	- boolean contain(Object o) - 주어진 객체 있는지 확인
		- isEmpty() - 컬렉션이 비어있는지 조사
		- Iterator<E> iterator() - 저장된 객체를 한 번씩 가져오는 반복자 리턴
	객체 삭제 	- void clear() - 모든객체 삭제
		- boolean remove(Object o) - 주어진 객체를 삭제

1. HashSet
* 가장 많이 씀
ex)	Set<E> set = new HashSet<E>();	// E에 지정된 타입의 객체만 저장
	Set<E> set = new HashSet<>();	// E에 지정된 타입의 객체만 저장
	Set set = new HashSet();
* 같은 문자열을 갖는 String 객체는 동등한 객체로 간주 - HashCode()의 리턴값이 같고, equals()의 리턴값이 True 이기 때문
* 객체를 반복해서 가져오는건 반복문과 iterator 메소드이다.
ex)	Set<E> set = new HashSet<>();
	for(E e : set) {
		...
	}

	Set<E> set = new HashSet<>();
	Iterator<E> iterator = set.iterator();

	iterator.hasNext() - 가져올 객체 있음 true 아님 false
	iterator.next() - 하나의 객체 가져옴
	iterator.remove() - next()로 가져온 객체를 Set 컬렉션에서 제거

	while(iterator.hasNext()) {
		E e = iterator.next();
	}


15-4 Map Collection
* key 와 value로 구성된 Entry 객체를 저장
* 키는 중복 x, 값 중복 o (키 중복되면 기존거 사라지고 새로운거 저장)
	객체 추가 	- V put(K ket, V value) - 주어진 키와 값을 추가, 저장되면 값을 리턴
	객체 검색 	- boolean contains(Object key) - 주어진 키 있는지 확인
		- boolean containsValue(Object value) - 주어진 값 있는지 확인
		- V get(int key) - 주어진 키의 값을 리턴
		- boolean isEmpty() - 컬렉션이 비어있는지 여부
		- Set<K> keySet() - 모든 키를 Set 객체에 담아서 리턴
		- int size() - 저장된 키의 수 리턴
		- Collection<V> values() - 저장된 모든 값 Collection에 담아 리턴
	객체 삭제 	- void clear() - 모든 키와값 삭제
		- V remove(object key) - 주어진 키와 일치하는 map, entry 삭제, 삭제도ㅓㅣ면 값을 리턴

1. HashMap
* 키로 사용할 객체가 hashCode() 메소드의 리턴값 같고 equals()메소드가 ture 면 중복 저장 허용 x
ex)	Map<K, V> map = new HashMap<K, V>();
	Map<K, V> map = new HashMap<>();	//K, V 가 map 과 hashmap 모두 동일할 경우 생략 가능
* Map map = new hashMap(); 도 가능하지만 안씀

2. HashTable
* HashMap과 동일 내부 구조
* 하지만 동기화된 메소드로 구성, 멀티스레드 동시에 실행 불가
* 멀티 스레드 환경에서도 안전하게 객체 추가, 삭제 가능 (Vector와 비슷)

3. Properties
* Properties는 Hashtable의 자식 클래스이기 때문에 Hashtable 특징 그대로 가지고있다.
* Properties는 키와 값을 String 타입으로 제한한 컬랙션
* 확장자가 .properties인 프로퍼티 파일을 읽을 때 사용
* 따로 공부 필요



15-5 검색 기능을 강화시킨 컬렉션

1. TreeSet
*TreeSet은 binary tree를 기반으로한 Set Collection
*binary tree 는 여러개의 node가 트리형태로 연결된 구조, 하나의 노드에서 시작해 최대 2개의 노드를 연결가능
*부모 노드의 객체와 비교해서 낮은것은 왼쪽 높은것은 오른쪽에 저장
ex)	TreeSet<E> treeSet = new TreeSet<E>();
	TreeSet<E> treeSet = new TreeSet<>();

	리턴타입	메소드		설명
	E	first()		제일 낮은 객체 리턴
	E	last()		제일 높은 객체 리턴
	E	lower(E e)	주어진 객체보다 바로 아래 객체 리턴
	E	higher(E e)	주어진 객체보다 바로 위 객체 리턴
	E	floor(E e)	동등한객체 있음 리턴, 없으면 바로 아래객체 리턴
	E	ceiling(E e)	동등한객체 있음 리턴, 없으면 바로 위객체 리턴
	E	pollFirst()	젤 낮은 객체 리턴하고 제거
	E	pollLast()	젤 높은 객체 리턴하고 제거

	Iterator<E>	descendingIterator()	내림차순으로 정렬된 Iterator을 리턴
	NavigableSet<E>	descendingSet()		내림차순으로 정렬된 NavigableSet을 리턴
	NavigableSet<E> headSet(E toElement, boolean inclusive)	주어진 객체보다 낮은 객체들을 NavigableSet으로 리턴 객체 포함 		여부는 두번째 매개값이 결정
	NavigableSet<E> tailSet( 위랑같음	)			주어진 객체보다 높은 객체들을 위랑 같음
	NavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toelement, boolean toInclusive) 시작과 끝으로		주어진 객체 사이의 객체들을 리턴, 포함여부 2,4매개값에 따라 다름

2. TreeMap
* TreeMap은 이진 트리를 기반으로한 Map 컬렉션 TreeSet과 유사
ex)	TreeSet<K, V> treeMap = new TreeMap<K, V>();
	TreeSet<K, V> treeMap = new TreeMap<>();


	리턴타입		메소드		설명
	Map.Entry<K, V>	first()		제일 낮은 객체 리턴
	Map.Entry<K, V>	last()		제일 높은 객체 리턴
	Map.Entry<K, V>	lower(K key)	주어진 객체보다 바로 아래 객체 리턴
	Map.Entry<K, V>	higher(K key)	주어진 객체보다 바로 위 객체 리턴
	Map.Entry<K, V>	floor(K key)	동등한객체 있음 리턴, 없으면 바로 아래객체 리턴
	Map.Entry<K, V>	ceiling(K key)	동등한객체 있음 리턴, 없으면 바로 위객체 리턴
	Map.Entry<K, V>	pollFirst()	젤 낮은 객체 리턴하고 제거
	Map.Entry<K, V>	pollLast()	젤 높은 객체 리턴하고 제거

	NavigableSet<K>		descendingKeySet()		내림차순으로 정렬된 키의 NavigableSet을 리턴
	NavigableMap<K, V>	descendingKeySet()		내림차순으로 정렬된 NavigableMap을 리턴

	NavigableMap<K, V> headSet(K toKey, boolean inclusive)	주어진 객체보다 낮은 객체들을 NavigableMap으로 리턴 객체 포함 		여부는 두번째 매개값이 결정
	NavigableMap<K, V> headSet(K fromKey, boolean inclusive)	주어진 객체보다 높은 객체들을 위랑 같음
	NavigableMap<K, V> subSet(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive) 시작과 끝		으로 주어진 객체 사이의 객체들을 리턴, 포함여부 2,4매개값에 따라 다름

1. Comparable 과 Comparator
* TreeSet에 저장되는 객체와 TreeMap에 저장되는 키 객체는 저장과 동시에 오름차순으로 정렬 - Comparable 인터페이스를 구현하고있어야 가능
* Integer, Double, String 타입은 모두 Comparable 인터페이스 구현 하지만 사용자 정의 객체는 반드시 구현해야함
ex)	public class Person implements Comparable<Person> {
		public int compareTo(Person o) {
			if(age<o.age) return -1;
			else if(age == o.age) return 0;
			else return 1;
		}
	}
* 비교 기능이 없는 Comparable 비구현 객체를 저장하는 다른 방법
ex)	TreeSet<E> treeSet = new TreeSet<E>( new ComparatorImpl() );
	TreeMap<K,V> treeMap = new TreeMap<K,V>( new ComparatorImpl() );

* CompareTo(T o1, T o2) - 동등하면 0, o1이 앞에오려면(o1이 작음) 음수, o2가 앞에오려면 양수(o1이 큼)









15-6 LIFO 와 FIFO 컬렉션
* LIFO(Last In First Out) 후입선출은 나중에 넣은 객체가 먼저 빠져나가고
* FIFO(First In First Out) 선입선출은 먼저 넣은 객체가 먼저 빠져나가는 구조를 말한다.
LIFO = Stack 클래스
FIFO = Queue 인터페이스

1. Stack
ex)	Stack<E> stack = new Stack<E>();
	Stack<E> stack = new Stack<>();

* 메소드
	push(E item) - 객체를 스택에 넣는다
	pop()	-	맨위 객체르 뺀다



2. Queue
ex)	Queue<E> stack = new Queue<E>();
	Queue<E> stack = new Queue<>();

* 메소드 
	offer(E e) - 객체를 큐에 넣는다
	poll() - 큐에서 객체를 빼낸다.


15-7 동기화된 컬렉션
* 컬렉션 프레임워크에 대부분의 클래스들은 싱글 스레드 환경
* Vector와 HashTable은 동기화된 메소드로 구성 하지만 ArrayList, HashSet, HashMap 은 안전하지 않음
* 이런 컬렉션을 위해 synchronizedXXX() 메소드 제공

리턴타입	메소드				설명
List<T>	synchronizedList(List<T> list)	List를 동기화된 List로
Map<K,V>synchronizedMap(Map<K,V> m) 	Map을 동기화된 Map
Set<T>	synchronizedSet(Set<T> s)	Set을 동기화된 Set

ex)	List<T> list = Collections.synchronizedList(new ArrayList<T>());


15-8 수정할 수 없는 컬렉션
* 요소 추가, 삭제 불가
1. 정적메소드 of()
ex)	List<E> immutableList = List.of(E... elements);
	Set<E> immutableSet = Set.of(E... elements);
	Map<K,V> immutavleMap = Map.of(K k1, V v1, K k2, V v2, ...);

2. 정적메소드 copyOf()
ex)	List<E> immutableList = List.copyOf(Collection<E> coll);
	Set<E> immutableSet = Set.copyOf(Collection<E> coll);
	Map<K,V> immutavleMap = Map.copyOf(Map<K,V> map);

3. 배열로부터 수정할 수 없는 List 컬렉션
ex)	String[] arr = {"a", "b", "c"};
	List<String> immutableList = Arrays.asList(arr);

