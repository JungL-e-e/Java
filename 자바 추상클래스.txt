<추상 클래스와 인터페이스>
-추상 클래스: 객체화할 수 없는 클래스. 즉, 자신을 위해서만 존재하고 자기는 스스로 객체를 만들 수 없는 클래스. 
	자식클래스를 위하여 존재하는 클래스.
- 인터페이스: 추상 클래스를 보다 더 추상화시킨 개념. 객체를 만들 수 없고, 다중 상속을 제공함.
- 추상 클래스의 특징
1. 일반 클래스처럼 멤버변수, 생성자, 일반 메소드 모두 가질 수 있음.
2. 추상 클래슨느 객체를 만들 수 없는 클래스
3. 추상 클래스의 메소든느 일반 메소드일 수도 있고 추상 메소드 일 수도 있음.
4. 추상 클래스 내의 메소든느 추상 메소드로 구현하는 것이 바람직함.
5. 추상 메소드는 선언만 있고 구현 내용은 없음.
6. 추상 메소드를 갖는 클래스는 반드시 추상 클래스가 되어야 함.
7. 추상 메소드는 반드시 자식 클래스에서 오버라이딩해야 함. 그렇지 않으면 자식 클래스도 추상 클래스가 되어야 함.
8. 추상 클래슨느 자식 클래스를 만들어 다형성을 이용하도록 함.
9. 추상 메소드에는 private 접근 제어자를 붙이면 자식 클래스에서 접근할 수 없으므로 private 접근 제어자를 사용하지 않음.
10. 추상 메소드를 갖지 않아도 추상 클래스로 정의할 수 있음.

- 자바 버전 7까지의 인터페이스
	interface 인터페이스명 {
		public static final 자료형 상수명 = 값;
		public abstract 반환자료형 메소드명 (매개변수 리스트);
	}
따라서 아래 정의는 모두 같음.
public static final int numberOfPerson = 100;
int numberOfPerson = 100;
public int numberOfPerson = 100;
static int numberOfPerson = 100;
final int numberOfPerson = 100;
publick static int numberOfPerson = 100;
- 인터페이스 내의 메소든는 public abstract로 정의해야 함. 하지만 메소드 앞에 public abstract를 생략해도 public abstract로 간주함. 따라서 메소드의 내용이 있으면 안됨.
인터페이스 내에서 아래 정의는 모두 같음.
public abstract void print();
void print();
public void print();
abstract void print();
----------------------------------------------------------------------------------------------
interface 인터페이스명 {
	public static final int data = 100; //  반드시 초기화해야 함.
	public abstract void show(); // 반드시 추상 메소드여야 함.
}
- 자바 8에서는 default 메소드와 static 메소드가 추가되었음.
- 자바 9에서는 private 메소드가 추가되었음.
- 인터페이스 내의 변수: 

2. 런타임 에러
	- 에러: 프로그램 코드로 수습될 수 없음.(예: 메모리 부족 등)
	- 예외: 프로그램 코드로 수습할 수 있음.(예: 배열 인덱스 오류 등)
- 최상위 클래스는 Object
- 예외의 최상위 클래슨느 Throwable 이며 Object 바로 밑에 클래스임.
	Throwable에는 Exception과 Error로 구성되어 있음.
	Exception과