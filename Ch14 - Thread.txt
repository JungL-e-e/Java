14-1 멀티 스레드 개념
* 스레드는 코드의 실행 흐름을 말하는데, 프로세스 내에 스레드가 두 개라면 두 개의 코드 실행 흐름이 생긴다는 의미이다.
* 멀티 프로세스 - 프로그램 단위의 멀티 태스킹 / 멀티 스레드 - 프로그램 내부의 멀티 태스킹



14-2 메인 스레드
* 모든 자바 프로그램은 메인 스레드가 main()메소드를 실행하면서 시작
* 메인 스레드는 main()메소드의 첫 코드부터 실행 / 마지막 코드까지 실행하거나 return무ㅡㄴ을 만나면 실행 종료
* 메인 스레드가 종료되도 작업스레드가 실행중이면 프로세스 종료 x



14-3 작업 스레드 생성과 실행
* 작업 스레드도 객체로 관리 - 클래스 필요
1. Thread 클래스로 직접 생성
ex)	Thread thread = new Thread(Runnable target);	// Runnable은 스레드가 작업을 실행할 때 사용하는 인터페이스 (Runnable은 							// run()메소드 정의되어있고 재정의해야함
	Class Task implements Runnable {
		@Override				// 이렇게 Runnable 구현 클래스 작성
		public void run() {
			...
		}
	}

	Runnable task = new Task();
	Thread thread = new Thread(task);

하지만 줄여서
	Thread thread = new Thread( new Runnable() {
		@Override
		public void run() {
			...
		}
	} );

작업 스레드 객체가 생성된후
	thread.start(); 를해주어야지 시작

요약하면
	메인스레드
	   |
	new Thread(task)		class Task implements Runnable {
	start() 메소드 호출 -------------- 		public void run() {
	   |						(작업스레드 실행)
	   | (메인 스레드 실행)			}
					}



2. Thread 자식 클래스로 생성
ex)	public class WorkerThread extends Thread {
		@Override
		public void run() {
			스레드 실행 코드
		}
	}

	Thread thread = new WorkerThread();
	thread.start();

* Thread 익명 자식 객체를 사용할 수도 있음 - 명시적인 자식 클래스 정의 x
ec)	Thread thread = new Thread() {
		@Override
		public void run() {
			스레드 실행 코드 
		}
	}
	thread.start();



14-4 스레드 이름
* 스레드는 자신의 이름을 가지고 있음 (메인 스레드는 main, 작업 스레드는 Thread-n 이라는 이름을 가진다. 
	thread.setName("스레드 이름");	// 스레드 이름 변경

* 	Thread thread = Thread.currentThread();
	System.out.println(thread.getName());	//현재 어떤 스레드 실행중인지 알 수 있음


14-5 스레드 상태
* 스레드 객체를 생성(new)하고, start() 메소드를 호출하면 바로 스레드가 실행되는것이 아닌 실행대기상태(runnable)이 된다.
* 실행 대기 스레드는 cpu 스케쥴링에 따라 cpu를 점유하고 run()메소드를 실행한다. 이때 (running)상태가 된다.
* 이렇게 스레드는 실행 대기 상태화 실행 상태를 번갈아 가면서 자신의 run()메소드를 조금씩 실행한다.
* run 메소드가 종료되면 종료상태가 된다.(terminated)
* 실행상태에서 실행할 수 없는 상태가 되면 일시 정지 상태로 간다.

일시정지
	1. sleep(lonmg millis)	- 주어진 시간동안 스레드를 일시정지 상태
	2. join()		- 스레드가 일시정지, join()메소드가 종료되면 실행 대기상태
	3. wait()		- 동기화 블록 내에서 스레드 정지상태

일시정지 벗어남
	1. interrupt() 		- 일시정지상태일때, InterruptedException을 발생시켜 실행 대기 상태 또는 종료 상태로 만듬
	2. notify()
	   notifyAll()		- wait() 메소드로 인해 일시정지된 스레드를 실행 대기 상태로 만듬

실행에서 실행대기로 보냄
	1. yiedl()		- 실행 상태에서 다른 스레드에게 실행을 양보하고 실행 대기 상태가 됨

1. 주어진 시간 동안 일시정지
* sleep(long millis(1/1000)단위) // millis 는 1/1000 초
* sleep 은 InterruptedException 처리가 필요
* sleep을 이용하여 시간을 조정 가능
ex)	try {Thread.sleep(5000); } catch (InterruptedException e) {} 	// Thread에서 5초의 시간이 지남 

2. 다른 스레드의 종료를 기다림
ex) 	Thread A 안에서
	threadB.start();
	threadB.join();	// Thread A 일시정지후 B가 모두 종료되면 그때 A 스타트

3. 다른 스레드에게 실행 양보


14-6 스레드 동기화
* 멀티 스레드는 하나의 객체를 공유해서 작업할 수 있지만, 다른스레드에 의해 객체 내부 데이터가 쉽게 변경가능 
* 그것을 막기위해 사용중인 객체를 다른 스레드가 변경할 수없도록 하려면 스레드 작업이 끝날 때까지 객체에 잠금 > 스레드 동기화
* 객체 내부에 동기화 메소드와 동기화 블록이 여러 개가 있다면, 일반메소드를 제외한 어떤것도 실행 불가능

1. 동기화 메소드 및 블록 선언
	public synchronized void method() {
		//단 하나의 스레드만 실행하는 영역
	}

ex)	public void method() {
		// 여러개 가능
		
		synchronized(공유객체) {
			// 하나만 가능
		}
		
		//여러개 가능
	}

2. wait()과 notify()를 이용한 스레드 제어
* 두 개의 스레드를 교대로 번갈아 가며 실행할때 사용
* 두 메도느 모두 동기화 메소드 또는 블록 내에서만 사용 가능
* 더 공부 필요..


14-7 스레드 안전 종료
* stop() 메소드를 제공하지만 , 리소스들이 불안정하게 종료되어 사용안함
1. 조건 이용 = while 문을 이용하여 사용
ex)	public class XXXThread extends Thread {
		private boolean stop;
		
		public void run() {
			while( !stop ) {
				//스레드 반복 코드;
			}
			// 스레드 리소스 정리
		}
	}

2. interrupt() 메소드 이용
* interrupt() 메소드는 스레드가 일시 정지 상태에 있을 때 InterruptedException 예외를 발생시키는 역할



14-8 데몬 스레드
* daemon thread 는 주 스레드의 작업을 돕는 보조적인 역할을 수행하는 스레드
* 공부 필요


14-9 스레드 풀
* 병렬 작업 처리가 많아지면 cpu가 바빠지고 메모리 사용량이 늘어나기 때문에 스레드의 폭증을 막으려면 스레드 풀을 사용하는것이 좋다.
* 스레드풀은 작업 처리에 사용되는 스레드를 제한된 개수만큼 정해놓고 작업 queue에 들어오는 작업들을 스레드가 하나씩 맡아 처리하는 방식
1. 스레드풀 생성
2. 스레드풀 종료
3. 작업 생성과 처리 요청
* 공부 필요